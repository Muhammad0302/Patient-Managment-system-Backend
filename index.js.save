
const path = require('path');
// load dependencies
const env = require('dotenv');
var cors = require('cors')
const express = require('express');
const bodyParser = require('body-parser');
var { expressjwt: jwt } = require("express-jwt");
const app = express();
var swaggerJsdoc = require("swagger-jsdoc");
var swaggerUi = require("swagger-ui-express");
//Loading Routes
const webRoutes = require('./routes/web');
const adminRoutes = require('./routes/admin');
const sequelize = require('./config/database');
const errorController = require('./app/controllers/ErrorController');
app.use(cors())

env.config();
app.use(bodyParser.urlencoded({ extended: false }));
app.use(express.static(path.join(__dirname, 'public')));
app.use(bodyParser.json());
const options = {
	definition: {
		openapi: "3.0.0",
		info: {
			title: "EMTranPro Backend APIs with Swagger",
			version: "0.1.0",
			description:
				"This is a EMTranPro application made with Express and documented with Swagger",
			license: {
				name: "MIT",
				url: "https://spdx.org/licenses/MIT.html",
			},
			contact: {
				name: "Codistan",
				url: "https://logrocket.com",
				email: "info@email.com",
			},
		},
		components: {
			securitySchemes: {
			  bearerAuth: {
				type: 'http',
				scheme: 'bearer',
				bearerFormat: 'JWT',
			  }
			}
		  },
		  security: [{
			bearerAuth: []
		  }],
		servers: [
			{
				url: "http://localhost:4000",
			},
		],
	},
	apis: ["./docs/adminDocs.js"],
};
const specs = swaggerJsdoc(options);
app.use(
	"/api-docs",
	swaggerUi.serve,
	swaggerUi.setup(specs)
);
app.use(
	jwt({
	  secret: process.env.JWT_TOKEN_KEY,
	  algorithms: ["HS256"],
<<<<<<< HEAD
	}).unless({ path: ["/api/sign-up","/api/login","/api/reset-password","/api/forgot-password","/api/verify","/api/ping"] })
=======
	}).unless({ path: ["/api/sign-up","/api/login","/api/reset-password","/api/forget-password","/api/verify","/api/test","/admin/sign-up", "/admin/login", "/admin/reset-password", "/admin/forgot-password", "/admin/verify", "/api/test"] })
>>>>>>> f57fee21220a8922cecd890cbfe01f01a0ce8a69
	);
app.use('/api',webRoutes);
app.use('/admin',adminRoutes);
const init=require('./app/models/init');
sequelize
	// .sync({force : true})
<<<<<<< HEAD
//	.sync({ alter: true  })
	 .sync()
=======
	.sync()
	// .sync()
>>>>>>> f57fee21220a8922cecd890cbfe01f01a0ce8a69
	.then(() => {
		app.listen(process.env.PORT);
		//pending set timezone

		console.log("App listening on port " + process.env.PORT);
	})
	.catch(err => {
		console.log(err);
	});
